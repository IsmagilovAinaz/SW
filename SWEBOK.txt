**Основы программных требований с 1 - 5 стр** 
Основные моменты можно свести к следующему:

Документ "Введение в программную инженерию и управление жизненным циклом ПО" содержит информацию о программных требованиях. Основные моменты можно свести к следующему:

1. **Определение программных требований**: Программные требования представляют собой свойства, которые должны быть надлежащим образом представлены для решения конкретных практических задач.
2. **Классификация требований**: Требования классифицируются на следующие категории:
 * Потребности (needs)
 * Группа функциональных требований:
 + Бизнес-требования (Business Requirements)
 + Пользовательские требования (User Requirements)
 + Функциональные требования (Functional Requirements)
 * Группа нефункциональных требований:
 + Бизнес-правила (Business Rules)
 + Внешние интерфейсы (External Interfaces)
 + Атрибуты качества (Quality Attributes)
 + Ограничения (Constraints)
 + Системные требования (System Requirements)
3. **Функциональные и нефункциональные требования**: Функциональные требования определяют "что" система должна делать, а нефункциональные требования определяют "каких условий" она должна удовлетворять.
4. **Роль программных требований в проекте разработки ПО**: Программные требования имеют решающее значение для успеха проекта разработки ПО, поскольку они помогают обеспечить соответствие создаваемой системы реальным практическим потребностям.

В целом документ представляет собой краткий обзор области знаний "Программные требования" и их роли в проектировании и развитии программного обеспечения.

**стр 6-10**

Документ описывает важность понимания потребностей и требований заинтересованных сторон в программном обеспечении. Автор подчеркивает три группы заинтересованных сторон: заказчиков, маркетологов и регуляторов.

- **Заказчики**: Обладают пониманием персонификации и требуют индивидуального подхода.
- **Маркетологи**: Нуждаются в идентификации потребностей и представлении интересов потребителей.
- **Регуляторы**: Насматриваются на соответствие руководящим документам и стандартам.
- **Аналитики (Market analysts)**: Обеспечивают понимание рынка и потребностей пользователей.

Документ также затрагивает важность определения атрибутов и метрик качества программного обеспечения, которые можно разделить на три группы практик:

1. **Покрытие процессов работы с требованиями**: Обеспечение соответствия стандартам и моделям улучшения процессов.
2. **Измерение и количественная оценка (benchmarking)**: Мониторинг и анализ процесса работы с требованиями.
3. **Планирование и реализация процесса улучшения**: Внедрение методов для постоянного совершенствования процесса разработки программного обеспечения.

В заключении, документ подчеркивает важность четкого определения требований и их количественной оценки в программном обеспечении.

**стр 11-15**

В документе описывается процесс программной инженерии, в частности, сбор и анализ требований к проекту.

**Часть 1: Идентификация источников требований**

- Сначала необходимо определить источники требований (Citation 3).
- Вопросы понимания информированности источников требований и их значимости фокусируются на целях, знании предметной области, заинтересованных лицах, операционном окружении и организационной среде.

**Часть 2: Выделение приоритетов и однозначность требований**

- После определения источников требований необходимо определить их влияние на проект (Citation 3).
- Требования должны быть четкими и однозначными, чтобы инженеры могли правильно их реализовать.

**Часть 3: Техники извлечения требований**

- Существуют различные методы и техники для извлечения требований (Citation 2).
- Например, наблюдение - это прямое присутствие аналитиков и инженеров рядом с пользователем в процессе выполнения его работ.
- Другие методы включают в себя запланированный мозговой штурм и интервьюрирование.

**Упрощенная шпаргалка:**

1. Определите источники требований (Citation 3).
2. Выделите приоритеты и убедитесь, что требования четкие и однозначные.
3. Используйте методы извлечения требований (например, наблюдение, запланированный мозговой штурм или интервьюрирование) для получения необходимой информации.

**Важные точки:**

- Источники требований должны быть четко определены.
- Требования должны быть четкими и однозначными.
- Существуют различные методы и техники для извлечения требований.

**стр 16-20**

В документе затронуты следующие темы:

1. **Управление требованиями**: Важность управления изменениями, сопровождения актуальности требований и их реализации для успешных процессов программной инженерии.
2. **Документирование и управление требованиями**: Недостаток документирования и управления требованиями в молодых компаниях, что приводит к проблемам с отслеживанием необходимых требований.
3. **Прототипирование**: Важность прототипирования для выявления функциональных и иных требований, а также его роль в проверке требований или технологических идей.
4. **Утверждение модели**: Неспособность системы соответствовать заданным требованиям без утверждения модели и формальной проверки.
5. **Приемочные тесты (Acceptance Tests)**: Важность верификации требований для обеспечения приемлемого качества продукта.

Основные моменты:

* Необходимость документирования и управления требованиями для успешных процессов программной инженерии.
* Важность прототипирования в выявлении функциональных и иных требований.
* Необходимость утверждения модели для обеспечения соответствия системы заданным требованиям.
* Важность верификации требований для обеспечения приемлемого качества продукта.

**стр 21**

Документ представляет собой введение в программную инженерию и управление жизненным циклом ПО. Основные моменты можно кратко охарактеризовать следующим образом:

1. **Измерение требований**: необходимо определить "объем" требований для создаваемого программного продукта, которое полезно для оценки масштабов изменений в требованиях, стоимости разработки и поддержки.
2. **Функциональное измерение размера** (FSM): это техника численной оценки, определенная в стандарте IEEE 14143.1, которая позволяет оценивать масштабы функциональности программной системы.
3. **Модели зрелости требований**: существуют различные модели зрелости требований, такие как RUP и CMMI, которые включают определение и управление требованиями на разных уровнях зрелости.

В целом, документ подчеркивает важность измерения и управления требованиями в программной инженерии для обеспечения эффективности разработки и поддержки программного продукта.